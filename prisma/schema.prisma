// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "postgresql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ****** ENUMS ****** //
enum AccountTypes {
  Debit
  Credit
  Cash
}

// user model
model User {
  id                String             @id @default(uuid()) @db.VarChar()
  email             String             @unique @db.VarChar()
  username          String             @unique @db.VarChar(64)
  name              String?            @db.VarChar()
  lastname          String?            @db.VarChar()
  password          String             @db.VarChar()
  isAdmin           Boolean            @default(false)
  emailVerified     Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?          @updatedAt
  deletedAt         DateTime?
  confirmationToken ConfirmationToken?
  passwordReset     PasswordReset?
  accounts          Account[]
  categories        Category[]
  transactions      Transaction[]
}

model ConfirmationToken {
  id               String    @id @default(uuid()) @db.VarChar()
  user             User      @relation(fields: [userId], references: [id])
  userId           String    @unique @db.VarChar()
  token            String    @db.VarChar()
  status           String    @default("pending") @db.VarChar()
  validUntil       DateTime
  confirmationDate DateTime
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  deletedAt        DateTime?
}

model PasswordReset {
  id                        String    @id @default(uuid()) @db.VarChar()
  user                      User      @relation(fields: [userId], references: [id])
  userId                    String    @unique @db.VarChar()
  passwordResetToken        String?   @db.VarChar()
  passwordResetTokenExpires DateTime?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime? @updatedAt
  deletedAt                 DateTime?
}

model Account {
  id            String        @id @default(uuid()) @db.VarChar()
  user          User          @relation(fields: [userId], references: [id])
  userId        String        @unique @db.VarChar()
  name          String        @db.VarChar()
  type          AccountTypes  @default(Debit)
  billingPeriod Int?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
  deletedAt     DateTime?
  transactions  Transaction[]
}

model Category {
  id           String        @id @default(uuid()) @db.VarChar()
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique @db.VarChar()
  name         String        @db.VarChar()
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  deletedAt    DateTime?
  transactions Transaction[]
}

model Transaction {
  id                 String    @id @default(uuid()) @db.VarChar()
  user               User      @relation(fields: [userId], references: [id])
  userId             String    @unique @db.VarChar()
  category           Category  @relation(fields: [categoryId], references: [id])
  categoryId         String    @unique @db.VarChar()
  account            Account   @relation(fields: [accountId], references: [id])
  accountId          String    @unique @db.VarChar()
  amount             Float
  hasInstalment      Boolean   @default(false)
  instalmentQuantity Int?
  instalmentAmount   Float?
  notes              String?   @db.VarChar()
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
  deletedAt          DateTime?
}
